* CMSKern

A general-purpose CMS.
It is written in Clojure and ClojureScript.

WIP

** Intro

CMSKern utilizes the following technologies to offer a highly flexible browser-based CMS-application:

- JSON-Schema [[http://json-schema.org/]]
- MongoDB
- Kafka

CMSKern differs from popular CMS-applications like WordPress or Drupal in the way, that it does not handle content-delivery and is primarily designed to manage content in an environment where the underlying schema of the contents changes fairly often.

*** Architecture
CMSKern consists of three main parts:

1. Frontend-SPA written in cljs using reagent/re-frame. It communicates mainly via websockets with the server.

2. Backend-UI-App, which handles the client-requests and generates the korresponding Kafka-events.

3. The command-handler does the work.


In a distributed environment the ui and the command-handler can be separated and live on different hardware connected via Kafka.


*** Kafka
Every event within CMSKern goes through Kafka, and if you want to link some services together with CMSKern - for example build up a event-sourcing-repo or trigger a search-engine-index, this is the way to do it. 

*** Structured data
CMSKern has the concept of =content-types= which are defined by JSON-Schemas. The wonderful [[https://github.com/mozilla-services/react-jsonschema-form][react-jsonschema-form]] is used to generate the input forms for arbitrary schemas and contents are saved in mongodb schemaless.

*** Alternative Subschemas
Currently react-jsonschema-form lacks the support of =anyOf= and =oneOf=
CMSKern support this anyOf-structure to generate changeable subforms:

#+BEGIN_SRC javascript
{
                "title" "Sections",
                "type" "array",
                "items" {"anyOf" [
                                    {"type" "object",
                                     "title" "Auto"
                                     "properties"
                                     {"strs" {"type" "string"}
                                      "type" {"type" "string"
                                              "enum" ["auto"]}}}
                                    {"type" "object",
                                     "title" "Manual"
                                     "properties"
                                     {"ids" {"type" "string"}
                                      "type" {"type" "string"
                                        "enum" ["manual"]}}}
                                    ]
                         }
                }
#+END_SRC

** Usage

- generate a RSA keypair and name them cmskern.rsa and cmskern-pub.key
- install the react-jsonschema-form component via npm
#+BEGIN_SRC bash
$ npm install
$ npm run build
#+END_SRC
- run Kafka on localhost:9092
- run mongodb on localhost:27017
- start cms by lein run
- browse localhost:9088


** License

Copyright Â© 2017 Kang Research & Development GmbH, Hamburg, Germany

Distributed under the Eclipse Public License either version 1.0 or (at
your option) any later version.
